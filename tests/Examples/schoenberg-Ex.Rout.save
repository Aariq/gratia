
R version 3.4.3 Patched (2018-01-09 r74105) -- "Kite-Eating Tree"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "schoenberg"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('schoenberg')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("confint.fderiv")
> ### * confint.fderiv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: confint.fderiv
> ### Title: Point-wise and simultaneous confidence intervals for derivatives
> ###   of smooths
> ### Aliases: confint.fderiv
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-22. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> ## first derivatives of all smooths...
> fd <- fderiv(mod)
> 
> ## point-wise interval
> ci <- confint(fd, type = "confidence")
> head(ci)
  term      lower      est    upper
1   x0 -0.8496033 4.112256 9.074116
2   x0 -0.8489453 4.112287 9.073519
3   x0 -0.8448851 4.112468 9.069821
4   x0 -0.8329611 4.112988 9.058936
5   x0 -0.8108549 4.113933 9.038721
6   x0 -0.7769722 4.115360 9.007693
> 
> ## simultaneous interval for smooth term of x1
> set.seed(42)
> x1.sint <- confint(fd, parm = "x1", type = "simultaneous", nsim = 1000)
> head(x1.sint)
  term     lower      est    upper
1   x1 -5.252711 1.423165 8.099042
2   x1 -5.251568 1.423211 8.097990
3   x1 -5.246292 1.423425 8.093143
4   x1 -5.235698 1.423860 8.083418
5   x1 -5.218325 1.424591 8.067507
6   x1 -5.192814 1.425697 8.044209
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("confint.gam")
> ### * confint.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: confint.gam
> ### Title: Point-wise and simultaneous confidence intervals for smooths
> ### Aliases: confint.gam confint.gamm
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-22. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> ## point-wise interval
> ci <- confint(mod, parm = "x1", type = "confidence")
> head(ci)
  smooth           x1      est        se    lower    upper     crit
1  s(x1) 0.0006632213 5.888546 0.3134611 5.274174 6.502919 1.959964
2  s(x1) 0.0056813456 5.895688 0.3045623 5.298757 6.492619 1.959964
3  s(x1) 0.0106994698 5.902830 0.2958458 5.322983 6.482677 1.959964
4  s(x1) 0.0157175940 5.909974 0.2873297 5.346818 6.473130 1.959964
5  s(x1) 0.0207357183 5.917121 0.2790332 5.370226 6.464016 1.959964
6  s(x1) 0.0257538425 5.924272 0.2709761 5.393169 6.455376 1.959964
> 
> ## simultaneous interval for smooth term of x1
> set.seed(42)
> si <- confint(mod, parm = "x1", type = "simultaneous", nsim = 100)
> head(si)
  smooth           x1      est        se    lower    upper     crit
1  s(x1) 0.0006632213 5.888546 0.3134611 5.041962 6.735130 2.700763
2  s(x1) 0.0056813456 5.895688 0.3045623 5.073137 6.718238 2.700763
3  s(x1) 0.0106994698 5.902830 0.2958458 5.103821 6.701839 2.700763
4  s(x1) 0.0157175940 5.909974 0.2873297 5.133965 6.685984 2.700763
5  s(x1) 0.0207357183 5.917121 0.2790332 5.163518 6.670723 2.700763
6  s(x1) 0.0257538425 5.924272 0.2709761 5.192430 6.656114 2.700763
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("datagen")
> ### * datagen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: datagen
> ### Title: Generate data over the range of variables used in smooths
> ### Aliases: datagen datagen.mgcv.smooth datagen.gam datagen.gamm
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-22. For overview type 'help("mgcv-package")'.
> 
> ## 1d example
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> df <- datagen(m1)
> head(df)
   term           x
1 s(x0) 0.007109038
2 s(x0) 0.012087246
3 s(x0) 0.017065454
4 s(x0) 0.022043662
5 s(x0) 0.027021870
6 s(x0) 0.032000078
> 
> ## 2d example
> dat <- gamSim(2, n = 400, dist = "normal", scale = 2)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z), data = dat$data, method = "REML")
> df <- datagen(m2)
> head(df)
  smooth          x1          x2
1 s(x,z) 0.001867117 0.002381104
2 s(x,z) 0.006878970 0.002381104
3 s(x,z) 0.011890823 0.002381104
4 s(x,z) 0.016902676 0.002381104
5 s(x,z) 0.021914529 0.002381104
6 s(x,z) 0.026926382 0.002381104
> ## alternative showing using the mgcv.smooth method for a single smooth
> df2 <- datagen(m2[["smooth"]][[1L]], data = dat$data)
> head(df2)
  smooth          x1          x2
1 s(x,z) 0.001867117 0.002381104
2 s(x,z) 0.011941448 0.002381104
3 s(x,z) 0.022015779 0.002381104
4 s(x,z) 0.032090110 0.002381104
5 s(x,z) 0.042164441 0.002381104
6 s(x,z) 0.052238771 0.002381104
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("draw.evaluated_smooth")
> ### * draw.evaluated_smooth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw.evaluated_smooth
> ### Title: Plot estimated smooths
> ### Aliases: draw.evaluated_smooth draw.evaluated_1d_smooth
> ###   draw.evaluated_2d_smooth draw.evaluated_2d_smooth
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-22. For overview type 'help("mgcv-package")'.
> 
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> sm <- evaluate_smooth(m1, "s(x2)")
> draw(sm)
> 
> set.seed(2)
> dat <- gamSim(2, n = 4000, dist = "normal", scale = 1)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z, k = 40), data = dat$data, method = "REML")
> 
> sm <- evaluate_smooth(m2, "s(x,z)", n = 100)
> draw(sm)
> 
> ## now the standard error the smooth instead
> draw(sm, show = "se")
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("draw.gam")
> ### * draw.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw.gam
> ### Title: Plot estimated smooths from a fitted GAM
> ### Aliases: draw.gam
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-22. For overview type 'help("mgcv-package")'.
> 
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> draw(m1)
> 
> set.seed(2)
> dat <- gamSim(2, n = 4000, dist = "normal", scale = 1)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z, k = 30), data = dat$data, method = "REML")
> 
> draw(m2)
> 
> dat <- gamSim(4)
Factor `by' variable example
> m3 <- gam(y ~ fac + s(x2, by = fac) + s(x0), data = dat)
> 
> draw(m3, scales = "fixed")
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("evaluate_smooth")
> ### * evaluate_smooth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evaluate_smooth
> ### Title: Evaluate a smooth
> ### Aliases: evaluate_smooth
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-22. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> head(evaluate_smooth(m1, "s(x1)"))
  smooth           x1       est        se
1  s(x1) 0.0006632213 -1.944733 0.3134611
2  s(x1) 0.0107501579 -1.930377 0.2957587
3  s(x1) 0.0208370945 -1.916014 0.2788680
4  s(x1) 0.0309240311 -1.901632 0.2629466
5  s(x1) 0.0410109677 -1.887206 0.2481575
6  s(x1) 0.0510979043 -1.872698 0.2346391
> 
> ## 2d example
> set.seed(2)
> dat <- gamSim(2, n = 4000, dist = "normal", scale = 1)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z, k = 30), data = dat$data, method = "REML")
> 
> head(evaluate_smooth(m2, "s(x,z)", n = 100))
  smooth            x            z       est        se
1 s(x,z) 2.298248e-05 4.321919e-05 0.1226246 0.1149179
2 s(x,z) 1.012240e-02 4.321919e-05 0.1218180 0.1124405
3 s(x,z) 2.022182e-02 4.321919e-05 0.1208805 0.1099417
4 s(x,z) 3.032124e-02 4.321919e-05 0.1198083 0.1074268
5 s(x,z) 4.042066e-02 4.321919e-05 0.1185977 0.1049027
6 s(x,z) 5.052008e-02 4.321919e-05 0.1172456 0.1023753
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("fderiv")
> ### * fderiv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fderiv
> ### Title: First derivatives of fitted GAM functions
> ### Aliases: fderiv fderiv.gam fderiv.gamm
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-22. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> ## first derivatives of all smooths...
> fd <- fderiv(mod)
> 
> ## ...and a selected smooth
> fd2 <- fderiv(mod, term = "x1")
> 
> ## Models with factors
> set.seed(2)
> dat <- gamSim(4, n = 400, dist = "normal", scale = 2)
Factor `by' variable example
> mod <- gam(y ~ s(x0) + s(x1) + fac, data = dat, method = "REML")
> 
> ## first derivatives of all smooths...
> fd <- fderiv(mod)
> 
> ## ...and a selected smooth
> fd2 <- fderiv(mod, term = "x1")
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("simulate")
> ### * simulate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulate.gam
> ### Title: Simulate from the posterior distribution of a GAM
> ### Aliases: simulate.gam simulate.gamm simulate.scam
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-22. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> sims <- simulate(m1, nsim = 5, seed = 42)
> head(sims)
       [,1]      [,2]      [,3]      [,4]      [,5]
1  8.463643  8.484913  9.281669  7.932456  8.990212
2  7.251423  7.633566  7.507079  7.216222  7.024481
3  2.279659  2.200594  2.890054  2.216336  2.748218
4 11.425815 10.953418 10.565366 10.945019 11.165367
5 14.124534 14.400417 14.269158 13.717802 13.865250
6  6.196114  5.807008  6.476156  5.895773  6.026671
> 
> m2 <- gamm(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> sims <- simulate(m2, nsim = 5, seed = 42)
> head(sims)
       [,1]      [,2]      [,3]      [,4]      [,5]
1  8.971743  8.982341  8.521636  8.719766  8.743016
2  7.705300  8.197181  8.111895  7.605918  7.530927
3  4.014604  2.236003  4.171701  3.421035  3.460320
4 10.855415 10.869624 11.692072 10.538758 10.850914
5 14.143058 14.192433 13.947953 14.566622 13.801282
6  6.213243  5.956054  6.227990  5.496258  5.955369
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  39.477 0.26 40.31 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
